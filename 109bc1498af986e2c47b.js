/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./joint-companies.js":
/*!****************************!*\
  !*** ./joint-companies.js ***!
  \****************************/
/***/ (() => {

eval("/* Copyright (C) Caspian Innovation Center, LLC - All Rights Reserved\r\n * Unauthorized copying of this file, via any medium is strictly prohibited\r\n * Proprietary and confidential\r\n * Written by Vugar Eyvazov <vugar.i.eyvazov@caspianic.com>, 2022\r\n */\r\n\r\ngo.Shape.defineFigureGenerator('ExpandedLine', (shape, w, h) => {\r\n    return new go.Geometry().add(\r\n        new go.PathFigure(0, 0.25 * h, false)\r\n            .add(new go.PathSegment(go.PathSegment.Line, 0.5 * w, 0.75 * h))\r\n            .add(new go.PathSegment(go.PathSegment.Line, w, 0.25 * h))\r\n    );\r\n});\r\ngo.Shape.defineFigureGenerator('CollapsedLine', (shape, w, h) => {\r\n    return new go.Geometry().add(\r\n        new go.PathFigure(0.25 * w, 0, false)\r\n            .add(new go.PathSegment(go.PathSegment.Line, 0.75 * w, 0.5 * h))\r\n            .add(new go.PathSegment(go.PathSegment.Line, 0.25 * w, h))\r\n    );\r\n});\r\n\r\nfunction showSnackbar(text, timer) {\r\n    if (!timer) timer = 3000;\r\n    var x = document.getElementById('snackbar');\r\n    x.className = 'show';\r\n    x.innerText = text;\r\n    setTimeout(function () {\r\n        x.className = x.className.replace('show', '');\r\n    }, timer);\r\n}\r\n\r\nshowSnackbar('🔁 Yüklənir', 1500);\r\nvar globalSearch = null;\r\nasync function getData() {\r\n    let url =\r\n        'http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=97419&objAction=RunReport';\r\n    let result = await fetch(url);\r\n    let data = await result.json();\r\n    data.result.pop();\r\n    var group = _.groupBy(data.result, 'key');\r\n    group = _.map(group, x => {\r\n        if (x.length > 1) {\r\n            let res = _.reduce(\r\n                x,\r\n                (pr, cv) => {\r\n                    pr.dataPoints.push({ y: cv.y, label: cv.label });\r\n                    return pr;\r\n                },\r\n                {\r\n                    key: x[0].key,\r\n                    text: x[0].text,\r\n                    color: x[0].color,\r\n                    share: x[0].share,\r\n                    parent: x[0].parent,\r\n                    countemp: x[0].countemp,\r\n                    servicename: x[0].servicename,\r\n                    dataPoints: [],\r\n                }\r\n            );\r\n            return res;\r\n        } else return x;\r\n    });\r\n    return _.flatMap(group);\r\n}\r\n//let nodesArr = null;\r\nasync function init() {\r\n    nodesArr = await getData();\r\n    const $ = go.GraphObject.make;\r\n    myDiagram = $(go.Diagram, 'myDiagramDiv', {\r\n        allowMove: false,\r\n        allowCopy: false,\r\n        allowDelete: false,\r\n        allowHorizontalScroll: true,\r\n        layout: $(go.TreeLayout, {\r\n            alignment: go.TreeLayout.AlignmentStart,\r\n            angle: 0,\r\n            compaction: go.TreeLayout.CompactionNone,\r\n            layerSpacing: 16,\r\n            layerSpacingParentOverlap: 1,\r\n            nodeIndentPastParent: 1.0,\r\n            nodeSpacing: 0,\r\n            setsPortSpot: false,\r\n            setsChildPortSpot: false,\r\n        }),\r\n        ChangedSelection: treeSelectionChanged,\r\n    });\r\n\r\n    myDiagram.nodeTemplate = $(\r\n        go.Node,\r\n        {\r\n            // no Adornment: instead change panel background color by binding to Node.isSelected\r\n            selectionAdorned: false,\r\n            // a custom function to allow expanding/collapsing on double-click\r\n            // this uses similar logic to a TreeExpanderButton\r\n            doubleClick: (e, node) => {\r\n                var cmd = myDiagram.commandHandler;\r\n                if (node.isTreeExpanded) {\r\n                    if (!cmd.canCollapseTree(node)) return;\r\n                } else {\r\n                    if (!cmd.canExpandTree(node)) return;\r\n                }\r\n                e.handled = true;\r\n                if (node.isTreeExpanded) {\r\n                    cmd.collapseTree(node);\r\n                } else {\r\n                    cmd.expandTree(node);\r\n                }\r\n            },\r\n        },\r\n        $('TreeExpanderButton', {\r\n            // customize the button's appearance\r\n            _treeExpandedFigure: 'ExpandedLine',\r\n            _treeCollapsedFigure: 'CollapsedLine',\r\n            'ButtonBorder.fill': 'whitesmoke',\r\n            'ButtonBorder.stroke': null,\r\n            _buttonFillOver: 'rgba(0,128,255,0.25)',\r\n            _buttonStrokeOver: null,\r\n        }),\r\n        $(\r\n            go.Panel,\r\n            'Horizontal',\r\n            {\r\n                position: new go.Point(18, 0),\r\n            },\r\n            new go.Binding('background', 'isSelected', s =>\r\n                s ? 'lightblue' : '#e8e8e8'\r\n            ).ofObject(),\r\n            $(\r\n                go.Picture,\r\n                {\r\n                    width: 20,\r\n                    height: 20,\r\n                    margin: new go.Margin(0, 4, 0, 0),\r\n                    imageStretch: go.GraphObject.Uniform,\r\n                },\r\n                // bind the picture source on two properties of the Node\r\n                // to display open folder, closed folder, or document\r\n                new go.Binding('fill', '#fa314a'),\r\n                new go.Binding(\r\n                    'source',\r\n                    'isTreeExpanded',\r\n                    imageConverter\r\n                ).ofObject(),\r\n                new go.Binding(\r\n                    'source',\r\n                    'isTreeLeaf',\r\n                    imageConverter\r\n                ).ofObject()\r\n            ),\r\n            $(\r\n                go.TextBlock,\r\n                {\r\n                    font: '14px Segoe UI, sans-serif',\r\n                    stroke: '#333',\r\n                    cursor: 'pointer',\r\n                    margin: new go.Margin(3, 0, 3, 0),\r\n                },\r\n                new go.Binding('text', 'text')\r\n            )\r\n        ) // end Horizontal Panel\r\n    ); // end Node\r\n\r\n    // without lines\r\n    myDiagram.linkTemplate = $(go.Link);\r\n    myDiagram.model = new go.TreeModel(nodesArr);\r\n    //end of tree\r\n    // side diagrams\r\n\r\n    myFullDiagram = $(\r\n        go.Diagram,\r\n        'fullDiagram', // each diagram refers to its DIV HTML element by idori=\r\n        {\r\n            initialAutoScale: go.Diagram.UniformToFill, // automatically scale down to show whole tree\r\n            maxScale: 0.25,\r\n            contentAlignment: go.Spot.Center, // center the tree in the viewport\r\n            isReadOnly: true, // don't allow user to change the diagram\r\n            'animationManager.isEnabled': false,\r\n            layout: $(go.TreeLayout, {\r\n                angle: 90,\r\n                sorting: go.TreeLayout.SortingAscending,\r\n            }),\r\n            maxSelectionCount: 1, // only one node may be selected at a time in each diagram\r\n            // when the selection changes, update the myLocalDiagram view\r\n            ChangedSelection: showLocalOnFullClick,\r\n        }\r\n    );\r\n\r\n    myLocalDiagram = $(go.Diagram, 'localDiagram', {\r\n        // this is very similar to the full Diagram\r\n        autoScale: go.Diagram.UniformToFill,\r\n        contentAlignment: go.Spot.Center,\r\n        isReadOnly: true,\r\n        layout: $(go.TreeLayout, {\r\n            angle: 90,\r\n            sorting: go.TreeLayout.SortingAscending,\r\n        }),\r\n        LayoutCompleted: e => {\r\n            var sel = e.diagram.selection.first();\r\n            if (sel !== null) myLocalDiagram.scrollToRect(sel.actualBounds);\r\n        },\r\n        maxSelectionCount: 1,\r\n        // when the selection changes, update the contents of the myLocalDiagram\r\n        ObjectSingleClicked: showLocalOnLocalClick,\r\n    });\r\n\r\n    // var myNodeTemplate = $(\r\n    //     go.Node,\r\n    //     'Auto',\r\n    //     {\r\n    //         locationSpot: go.Spot.Center,\r\n    //     },\r\n    //     new go.Binding('text', 'key', go.Binding.toString), // for sorting\r\n    //     $(go.Shape, 'Rectangle', new go.Binding('fill', 'color'), {\r\n    //         stroke: null,\r\n    //     }),\r\n    //     $(\r\n    //         go.TextBlock,\r\n    //         {\r\n    //             margin: 10,\r\n    //             textAlign: 'center',\r\n    //         },\r\n    //         new go.Binding('text', '', function (v) {\r\n    //             return !!v.share ? v.text + '\\n' + v.share : v.text;\r\n    //         })\r\n    //     )\r\n    // );\r\n\r\n    var myNodeTemplate = $(\r\n        go.Node,\r\n        'Auto',\r\n        {\r\n            locationSpot: go.Spot.Center,\r\n            toolTip: myToolTip,\r\n            margin: new go.Margin(0, 0, 0, 0),\r\n            selectionAdorned: false,\r\n        },\r\n        {\r\n            selectionAdornmentTemplate: $(\r\n                go.Adornment,\r\n                'Auto',\r\n                $(go.Shape, 'RoundedRectangle', {\r\n                    parameter1: 20,\r\n                    margin: new go.Margin(0, 0, 0, 0),\r\n                    fill: null,\r\n                    stroke: 'dodgerblue',\r\n                    strokeWidth: 1,\r\n                }),\r\n                $(go.Placeholder),\r\n                new go.Binding('fill', 'color')\r\n            ), // end Adornment\r\n        },\r\n        new go.Binding('text', 'key', go.Binding.toString), // for sorting\r\n        $(\r\n            go.Panel,\r\n            'Auto',\r\n            $(\r\n                go.Shape,\r\n                'RoundedRectangle',\r\n                {\r\n                    parameter1: 20,\r\n                    stroke: '#0088ff',\r\n                    margin: new go.Margin(0, 0, 0, 0),\r\n                    cursor: 'pointer',\r\n                },\r\n\r\n                new go.Binding('strokeWidth', 'isSelected', function (\r\n                    sel,\r\n                    shape\r\n                ) {\r\n                    return sel ? 2 : 0;\r\n                }).ofObject(),\r\n                new go.Binding('fill', 'color')\r\n            ),\r\n            $(\r\n                go.Panel,\r\n                'Vertical',\r\n\r\n                $(\r\n                    go.Panel,\r\n                    'Auto',\r\n                    $(\r\n                        go.Shape,\r\n                        'RoundedRectangle',\r\n                        {\r\n                            parameter1: 20,\r\n                            strokeWidth: 0,\r\n                            height: 0,\r\n                            fill: '#ededed',\r\n                            // visible: false,\r\n                        },\r\n                        new go.Binding('height', 'share', function (t, h) {\r\n                            if(t === ' ') t = '';\r\n                            return t ? 20 : 0;\r\n                        })\r\n                    ),\r\n                    $(\r\n                        go.TextBlock,\r\n                        {\r\n                            verticalAlignment: go.Spot.Center,\r\n                            background: '#ededed',\r\n                            stroke: '#FF5959',\r\n                            // width: 60,\r\n                            font: 'normal normal 700 14px Segoe UI',\r\n                            textAlign: 'center',\r\n                            cursor: 'pointer',\r\n                            visible: false,\r\n                        },\r\n                        new go.Binding('text', '', function (v) {\r\n                            return !!v.share ? v.share : null;\r\n                        }),\r\n                        new go.Binding('visible', 'share', function (t) {\r\n                            return !!t;\r\n                        })\r\n                    )\r\n                ),\r\n\r\n                $(\r\n                    go.TextBlock,\r\n                    {\r\n                        verticalAlignment: go.Spot.Center,\r\n                        stroke: '#ededed',\r\n                        width: 100,\r\n                        height: 30,\r\n                        font: '11px Segoe UI',\r\n                        textAlign: 'center',\r\n                        cursor: 'pointer',\r\n                    },\r\n                    new go.Binding('height', 'share', function (v) {\r\n                        return v ? 30 : 50;\r\n                    }),\r\n                    new go.Binding('text', '', function (v) {\r\n                        // return !!v.share ? v.text + '\\n' + v.share : v.text;\r\n                        return v.text;\r\n                    }),\r\n                    new go.Binding('fill', 'color'),\r\n                    new go.Binding('verticalAlignment', 'share', function (sh) {\r\n                        return sh ? 'go.Spot.Center' : 'go.Spot.Top';\r\n                    })\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    var myToolTip = $(go.HTMLInfo, {\r\n        show: showToolTip,\r\n        // hide: hideToolTip\r\n    });\r\n\r\n    async function getPopup1(cid) {\r\n        try {\r\n            let url =\r\n                'http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=102419&objAction=RunReport&cid=' +\r\n                cid;\r\n            let result = await fetch(url);\r\n            let data = await result.json();\r\n            return data;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n    async function getPopup2(cid) {\r\n        try {\r\n            let url =\r\n                'http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=101942&objAction=RunReport&cid=' +\r\n                cid;\r\n            let result = await fetch(url);\r\n            let data = await result.json();\r\n            data.pop();\r\n            return data;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n    async function getPopup3(cid) {\r\n        try {\r\n            let url =\r\n                'http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=102148&objAction=RunReport&cid=' +\r\n                cid;\r\n            let result = await fetch(url);\r\n            let data = await result.json();\r\n            data.pop();\r\n            return data;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async function getPopup4(cid) {\r\n        try {\r\n            let url =\r\n                'http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=102525&objAction=RunReport&cid=' +\r\n                cid;\r\n            let result = await fetch(url);\r\n            let data = await result.json();\r\n            data.pop();\r\n            return data;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async function getPopup5(cid) {\r\n        try {\r\n            let url =\r\n                'http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=102482&objAction=RunReport&cid=' +\r\n                cid;\r\n            let result = await fetch(url);\r\n            let data = await result.json();\r\n            data.pop();\r\n            return data;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    async function getPopup6(cid) {\r\n        try {\r\n            let url =\r\n                'http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=120878&objAction=RunReport&cid=' +\r\n                cid;\r\n            let result = await fetch(url);\r\n            let data = await result.json();\r\n            return data;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n   \r\n    async function showToolTip(obj, diagram) {\r\n        CanvasJS.addColorSet(\"greenShades\",\r\n            [\r\n            \"#3E8E7E\",\r\n            \"#7CD1B8\",\r\n            \"#FABB51\",\r\n            \"#FAEDC6\",\r\n            \"#FDAF75\"                \r\n            ]);\r\n        showSnackbar(\"🔁 Yüklənir\", 1000);\r\n        if (obj === null) {\r\n            hideToolTip(obj, diagram);\r\n            return;\r\n        }\r\n        var node = obj.part;\r\n        var data = node.data;\r\n        // if (!data.dataPoints) { return; }\r\n        const popup1 = await getPopup1(data.key);\r\n        const popup2 = await getPopup2(data.key);\r\n        const popup3 = await getPopup3(data.key);\r\n        const popup4 = await getPopup4(data.key);\r\n        const popup5 = await getPopup5(data.key);\r\n        const popup6 = await getPopup6(data.key);\r\n        var e = diagram.lastInput;\r\n        //node.actualBounds; //node.location; //node.actualBounds; //e.viewPoint;\r\n        var infoBoxHolder = document.getElementById(\"infoBoxHolder\");\r\n\r\n        if(!data.dataPoints && popup1.length === 0 && popup2.length === 0 && popup3.length === 0 && popup4.length === 0 && popup5.length === 0 && popup6.length === 0) { \r\n            showSnackbar(\"🚫 Məlumat tapılmadı\", 1000); \r\n            return; \r\n        } \r\n\r\n        infoBoxHolder.innerHTML = \"\";\r\n        if(data.dataPoints) {      \r\n            var infobox = document.createElement(\"div\");\r\n            infobox.id = \"infoBox\";\r\n            infoBoxHolder.appendChild(infobox);        \r\n            var chart = new CanvasJS.Chart(\"infoBox\", {\r\n                colorSet: \"greenShades\",\r\n                animationEnabled: true,\r\n                title: {\r\n                    text: data.text\r\n                },\r\n                legend: {\r\n                    cursor: \"pointer\",\r\n                    itemclick: explodePie,\r\n                },\r\n                data: [{\r\n                    type: \"pie\",\r\n                    startAngle: 240,\r\n                    yValueFormatString: \"##0.00\\\"%\\\"\",\r\n                    indexLabel: \"{label} {y}\",\r\n                    showInLegend: true,\r\n                    legendText: \"{label}\",\r\n                    toolTipContent: \"<strong>{label}</strong>\",\r\n                    dataPoints: data.dataPoints\r\n                }]\r\n            });\r\n            chart.render();\r\n        }\r\n\r\n\t\tfunction createAddInfoBox() {\t\t\r\n            var additionalInfoBox = document.createElement(\"div\");\r\n            additionalInfoBox.id = \"additionalInfoBox\";\r\n\t\t    additionalInfoBox.classList.add(\"add-info-box\");\r\n            additionalInfoBox.classList.add(\"container\");      \r\n            let parents = [\r\n             {  \r\n                key: 1,\r\n                cname: 'Business Units'\r\n             }, \r\n             {\r\n                key: 29,\r\n                cname: 'Subsidiaries'\r\n             },\r\n             {\r\n                 key: 88,\r\n                 cname: 'Joint Ventures'\r\n             },\r\n             {\r\n                 key: 114,\r\n                 cname: 'Associates'\r\n             },\r\n             {\r\n                 key: 138,\r\n                 cname: 'PSAs and RSAs in Development and Production Phase'\r\n             },\r\n             {\r\n                 key: 162,\r\n                 cname: 'PSAs and RSAs in Exploration and Evaluation Phase'\r\n             }];\r\n            let keys = parents.map(x=>x.key.toString());\r\n            if(removedParentObject && keys.includes(removedParentObject.key)){\r\n               const obj = parents.find(x=>{\r\n                   const key = Number.parseInt(removedParentObject.key);\r\n                   if(x.key === key) return x;\r\n                });\r\n               var type = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Tipi:</b></div><div class=\"col-6\">${obj.cname}</div></div>`;\r\n               additionalInfoBox.innerHTML += type; \r\n            }\r\n            \r\n            if(popup4 && popup4.length > 0){\r\n                let flag = \"\";\r\n                for (let i = 0; i < popup4.length; i++) {\r\n                    const el = popup4[i];\r\n                    flag += `<i class=\"round-flag-icon round-flag-${el}\"></i>&nbsp;`;\r\n                }\r\n                var countryTitle = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Fəaliyyət göstərdiyi ölkə:</b></div><div class=\"col-6\">${flag}</div></div>`;  \r\n                additionalInfoBox.innerHTML += countryTitle;  \r\n            }                   \r\n\r\n            if(popup5 && popup5.length > 0){\r\n                var ceoTitle = `<div class=\"row mt-2\"><div class=\"col-6\"><b>CEO:</b></div><div class=\"col-6\">${popup5[0]}</div></div>`;          \r\n                additionalInfoBox.innerHTML += ceoTitle;         \r\n            }\r\n\r\n            if(data.servicename && data.servicename !== '?'){\r\n                var segmentTitle = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Aid olduğu seqment:</b></div><div class=\"col-6\">${data.servicename}</div></div>`;  \r\n                additionalInfoBox.innerHTML += segmentTitle;\r\n            }\r\n\t\t\t\r\n\r\n            var controlOrganizationsTitleText = \"\"\r\n            if(popup2 && popup2.length > 0){\r\n                controlOrganizationsTitleText = \" Ümumi Yığıncaq\";\r\n            }\r\n            if(popup3 && popup3.length > 0){\r\n                if(controlOrganizationsTitleText !== \"\") controlOrganizationsTitleText += \",\"\r\n                controlOrganizationsTitleText += \" Direktorlar Şurası \";\r\n            }\r\n            if(popup6 && popup6.length >0){\r\n                if(controlOrganizationsTitleText !== \"\") controlOrganizationsTitleText += \",\"\r\n                controlOrganizationsTitleText += \" Komitə rəhbərləri \";\r\n            }\r\n            if(controlOrganizationsTitleText !== \"\"){\r\n                var controlOrganizationsTitle = `<div class=\"row mt-2\"><div class=\"col-6\"><b>İdarəetmə orqanları:</b></div><div class=\"col-6\">${controlOrganizationsTitleText}</div></div>`;\r\n                additionalInfoBox.innerHTML += controlOrganizationsTitle;\r\n            }\r\n\r\n            if(data.countemp && data.countemp !== \"?\"){\r\n                var numberOfEmployeesTitle = `<div class=\"row mt-2\"><div class=\"col-6\"><b>İşçi sayı:</b></div><div class=\"col-6\">${data.countemp}</div></div>`;            \r\n                additionalInfoBox.innerHTML += numberOfEmployeesTitle;\r\n            }\r\n            \t\t\r\n\r\n            if(popup1 && popup1[6]) {\r\n                var ebitdaTitle = `<div class=\"row mt-2\"><div class=\"col-6\"><b>EBITDA:</b></div><div class=\"col-6\">${popup1[6]}</div></div>`;\r\n                additionalInfoBox.innerHTML += ebitdaTitle;\r\n            }\r\n            if(popup1 && popup1[7]) {\r\n                var incomeTitle = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Xalis Mənfəət /(Zərər):</b></div><div class=\"col-6\">${popup1[7]}</div></div>`;\r\n                additionalInfoBox.innerHTML += incomeTitle;\r\n            }\t\t\t\t\t\t\r\n\t\t\tinfoBoxHolder.append(additionalInfoBox);\r\n\r\n            if(popup1.length > 0 || popup2.length > 0 || popup3.length > 0){\r\n                var moreInfoLinkDiv = document.createElement(\"div\");\r\n                moreInfoLinkDiv.id = \"moreInfoLinkDiv\";\t\r\n                moreInfoLinkDiv.classList.add(\"row\");\t\r\n                const next = () => {\r\n                    const el = document.getElementById(\"additionalInfoBox\");\r\n                    el.parentNode.removeChild(el);\r\n                    const el2 = document.getElementById(\"moreInfoLinkDiv\");\r\n                    el2.parentNode.removeChild(el2);\r\n                    createMoreDiv();\r\n                    \r\n                }\r\n                moreInfoLinkDiv.innerHTML = `<div class=\"d-flex mt-2 justify-content-center\"><button id=\"nextBtn\" class=\"btn btn-dark\">Find out more &#8680;</button></div>`;    \r\n                infoBoxHolder.append(moreInfoLinkDiv);\r\n                document.getElementById(\"nextBtn\").onclick = next;\r\n            }\t\t\t\r\n\t\t}\r\n\t\t   \r\n\t\tfunction createMoreDiv(){\r\n\t\t\tvar moreInfoDiv = document.createElement(\"div\");\r\n            moreInfoDiv.classList.add(\"container\");\r\n\t\t\tmoreInfoDiv.classList.add(\"add-info-box\");\r\n\t\t\tmoreInfoDiv.id = \"moreInfoDiv\";\r\n            \r\n            var popup2Text = '';\r\n            for (let i = 0; i < popup2.length; i++) {\r\n                const element = popup2[i];\r\n                popup2Text += element[1];\r\n                if(i !== popup2.length -1){\r\n                    popup2Text += ',';\r\n                }\r\n            }\r\n\r\n            if(popup2Text){\r\n                var p1 = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Təsisçilərin Ümumi Yığıncaqda Təmsilçiləri:</b></div><div class=\"col-6\">${popup2Text}</div></div>`;\r\n                moreInfoDiv.innerHTML += p1;\r\n            }\t\t\t\r\n\r\n            var popup3Text = '';\r\n            for (let i = 0; i < popup3.length; i++) {\r\n                const element = popup3[i];\r\n                popup3Text += element[1];\r\n                if(i !== popup3.length -1){\r\n                    popup3Text += ',';\r\n                }\r\n            }\r\n            if(popup3Text){\r\n                var p2 = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Direktorlar Şurasının Üzvləri:</b></div><div class=\"col-6\" style=\"word-break: break-word;\">${popup3Text}</div></div>`;\r\n                moreInfoDiv.innerHTML += p2;\r\n            }   \r\n            \r\n            if(popup6.length > 0){\r\n                var text = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Komitə rəhbərləri:</b></div><div class=\"col-6\" style=\"word-break: break-word;\">${popup6[0]}</div></div>`;\r\n                moreInfoDiv.innerHTML += text;\r\n            }\r\n\r\n            if(popup1 && popup1[2]){\r\n                var p3 = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Fəaliyyət sahəsi:</b></div><div class=\"col-6\">${popup1[1]}</div></div>`;\r\n                moreInfoDiv.innerHTML += p3;\r\n            }\r\n\t\t\t\r\n            if(popup1 && popup1[3]){\r\n                var p4 = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Cəmi Aktivlər:</b></div><div class=\"col-6\">${popup1[3]}</div></div>`;\r\n                moreInfoDiv.innerHTML += p4;\r\n            }\t\r\n\r\n            if(popup1 && popup1[4]){\r\n                var p5 = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Cəmi Kapital:</b></div><div class=\"col-6\">${popup1[4]}</div></div>`;\r\n                moreInfoDiv.innerHTML += p5;\r\n            }\r\n\r\n            if(popup1 && popup1[5]){\r\n                var p6 = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Cəmi Öhdəliklər:</b></div><div class=\"col-6\">${popup1[5]}</div></div>`;\r\n                moreInfoDiv.innerHTML += p6;\r\n            }\r\n\r\n            if(popup1 && popup1[8]){\r\n                var p7 = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Ödənilmiş mənfəət vergisi:</b></div><div class=\"col-6\">${popup1[8]}</div></div>`;\r\n                moreInfoDiv.innerHTML += p7;\r\n            }\t\r\n\r\n            if(popup1 && popup1[9]){\r\n                var p8 = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Ödənilmiş əmlak vergisi:</b></div><div class=\"col-6\">${popup1[9]}</div></div>`;\r\n                moreInfoDiv.innerHTML += p8;\r\n            }\t\r\n\r\n            if(popup1 && popup1[10] && popup1[10] !== \"?\"){\r\n                var p9 = `<div class=\"row mt-2\"><div class=\"col-6\"><b>Bütün təsisçilərə ödənilən dividendlər:</b></div><div class=\"col-6\">${popup1[10]}</div></div>`;\r\n                moreInfoDiv.innerHTML += p9;\r\n            }\t\r\n\r\n            if(popup1 && popup1[11] && popup1[11] !== \"?\"){\r\n                var p10 = `<div class=\"row mt-2\"><div class=\"col-6\"><b>SOCAR-a ödənilən dividendlər:</b></div><div class=\"col-6\">${popup1[11]}</div></div>`;\r\n                moreInfoDiv.innerHTML += p10;\r\n            }\t\r\n\r\n\t\t\tinfoBoxHolder.append(moreInfoDiv);\r\n\r\n            if(popup1.length > 0 || popup2.length > 0 || popup3.length > 0){\r\n                var backDiv = document.createElement(\"div\");\r\n\t\t\t    backDiv.id = \"backDiv\";\r\n                backDiv.classList.add(\"row\");\r\n                const back = () => {\r\n                    const el = document.getElementById(\"moreInfoDiv\");\r\n                    el.parentNode.removeChild(el);\r\n                    const el2 = document.getElementById(\"backDiv\");\r\n                    el2.parentNode.removeChild(el2);\r\n                    createAddInfoBox();\r\n                    \r\n                }\r\n                backDiv.innerHTML = `<div class=\"d-flex mt-2 justify-content-center\"><button id=\"backBtn\" class=\"btn btn-dark\">&#8678; Back</button></div>`;      \r\n                infoBoxHolder.append(backDiv);\r\n                document.getElementById(\"backBtn\").onclick = back;\r\n            }\r\n\t\t}\t\r\n        createAddInfoBox(); \r\n    }\r\n\r\n    function explodePie(e) {\r\n        if (\r\n            typeof e.dataSeries.dataPoints[e.dataPointIndex].exploded ===\r\n                'undefined' ||\r\n            !e.dataSeries.dataPoints[e.dataPointIndex].exploded\r\n        ) {\r\n            e.dataSeries.dataPoints[e.dataPointIndex].exploded = true;\r\n        } else {\r\n            e.dataSeries.dataPoints[e.dataPointIndex].exploded = false;\r\n        }\r\n        e.chart.render();\r\n    }\r\n\r\n    function hideToolTip(e) {\r\n        const isTooltip = e.path.some(x => x?.id === 'infoBoxHolder');\r\n        //if (e.target?.className === \"canvasjs-chart-canvas\") { return; }\r\n        if (isTooltip === true) {\r\n            return;\r\n        }\r\n        document.getElementById('infoBoxHolder').innerHTML = '';\r\n        return;\r\n    }\r\n\r\n    document.addEventListener('click', hideToolTip);\r\n    var showOnMap = function(e, obj){\r\n        var node = obj.part.adornedPart; \r\n        var el = myLocalDiagram.model.Fc.find(x=>x.key === node.data.key);\r\n        window.location.href = \"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=100072&objAction=RunReport&key=\"+el.key;\r\n    }\r\n    var editElement = function(e, obj){\r\n        var node = obj.part.adornedPart; \r\n        var el = myLocalDiagram.model.Fc.find(x=>x.key === node.data.key);\r\n        window.location.href = \"http://192.168.14.33/otcs/llisapi.dll/app/cd?func=ll&objId=114637&objAction=RunReport&key=\"+el.key;\r\n    }\r\n    var showDetails = function(e, obj){\r\n        alert(\"Hello\");\r\n    }\r\n    var myNodeTemplateLocal = $(\r\n        go.Node,\r\n        'Auto',\r\n        {\r\n            locationSpot: go.Spot.Center,\r\n            toolTip: myToolTip,\r\n            margin: new go.Margin(0, 0, 0, 0),\r\n            selectionAdorned: false,\r\n        },\r\n        {\r\n            contextMenu: $(\"ContextMenu\",\r\n            $(\"ContextMenuButton\",\r\n              {\r\n                \"ButtonBorder.fill\": \"white\",\r\n                \"_buttonFillOver\": \"skyblue\"\r\n              },\r\n              $(go.TextBlock, \"Show on Map\"),\r\n              { click: showOnMap }),\r\n              $(\"ContextMenuButton\",\r\n                    $(go.TextBlock, \"Edit\"),\r\n                    { click: editElement }\r\n               ),\r\n            )  \r\n            \r\n        },\r\n        {\r\n            selectionAdornmentTemplate: $(\r\n                go.Adornment,\r\n                'Auto',\r\n                $(go.Shape, 'RoundedRectangle', {\r\n                    parameter1: 20,\r\n                    margin: new go.Margin(0, 0, 0, 0),\r\n                    fill: null,\r\n                    stroke: 'dodgerblue',\r\n                    strokeWidth: 1,\r\n                }),\r\n                $(go.Placeholder),\r\n                new go.Binding('fill', 'color')\r\n            ), // end Adornment\r\n        },\r\n        new go.Binding('text', 'key', go.Binding.toString), // for sorting\r\n        $(\r\n            go.Panel,\r\n            'Auto',\r\n            $(\r\n                go.Shape,\r\n                'RoundedRectangle',\r\n                {\r\n                    parameter1: 20,\r\n                    stroke: '#0088ff',\r\n                    margin: new go.Margin(0, 0, 0, 0),\r\n                    cursor: 'pointer',\r\n                },\r\n\r\n                new go.Binding('strokeWidth', 'isSelected', function (\r\n                    sel,\r\n                    shape\r\n                ) {\r\n                    return sel ? 2 : 0;\r\n                }).ofObject(),\r\n                new go.Binding('fill', 'color')\r\n            ),\r\n            $(\r\n                go.Panel,\r\n                'Vertical',\r\n\r\n                $(\r\n                    go.Panel,\r\n                    'Auto',\r\n                    $(\r\n                        go.Shape,\r\n                        'RoundedRectangle',\r\n                        {\r\n                            parameter1: 20,\r\n                            strokeWidth: 0,\r\n                            height: 0,\r\n                            fill: '#ededed',\r\n                            // visible: false,\r\n                        },\r\n                        new go.Binding('height', 'share', function (t, h) {\r\n                            if(t === \" \") t = \"\";\r\n                            return t ? 20 : 0;\r\n                        })\r\n                    ),\r\n                    $(\r\n                        go.TextBlock,\r\n                        {\r\n                            verticalAlignment: go.Spot.Center,\r\n                            background: '#ededed',\r\n                            stroke: '#FF5959',\r\n                            // width: 60,\r\n                            font: 'normal normal 700 16px Segoe UI',\r\n                            textAlign: 'center',\r\n                            cursor: 'pointer',\r\n                            visible: false,\r\n                        },\r\n                        new go.Binding('text', '', function (v) {\r\n                            if (v.share === ' ') v.share = '';\r\n                            return !!v.share ? v.share + '%' : '';\r\n                        }),\r\n                        new go.Binding('visible', 'share', function (t) {\r\n                            return !!t;\r\n                        })\r\n                    )\r\n                ),\r\n\r\n                $(\r\n                    go.TextBlock,\r\n                    {\r\n                        verticalAlignment: go.Spot.Center,\r\n                        stroke: '#ededed',\r\n                        width: 130,\r\n                        height: 70,\r\n                        font: '600 14px Segoe UI',\r\n                        textAlign: 'center',\r\n                        cursor: 'pointer',\r\n                    },\r\n                    new go.Binding('height', 'share', function (v) {\r\n                        return v ? 50 : 90;\r\n                    }),\r\n                    new go.Binding('text', '', function (v) {\r\n                        return v.text;\r\n                    }),\r\n                    new go.Binding('fill', 'color'),\r\n                    new go.Binding('verticalAlignment', 'share', function (sh) {\r\n                        return sh ? 'go.Spot.Center' : 'go.Spot.Top';\r\n                    })\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\n    myFullDiagram.nodeTemplate = myNodeTemplate;\r\n    myLocalDiagram.nodeTemplate = myNodeTemplateLocal;\r\n    var myLinkTemplate = $(\r\n        go.Link,\r\n        {\r\n            routing: go.Link.Normal,\r\n            selectable: false,\r\n        },\r\n        $(go.Shape, {\r\n            strokeWidth: 1,\r\n            stroke: '#999',\r\n        }),\r\n        {\r\n            selectionAdornmentTemplate: $(\r\n                go.Adornment,\r\n                $(go.Shape, {\r\n                    isPanelMain: true,\r\n                    stroke: 'dodgerblue',\r\n                    strokeWidth: 8,\r\n                }),\r\n                $(go.Shape, {\r\n                    toArrow: 'Standard',\r\n                    fill: 'dodgerblue',\r\n                    stroke: null,\r\n                    scale: 2.5,\r\n                })\r\n            ), \r\n        },\r\n        $(go.Shape, { toArrow: 'OpenTriangle', fill: '#512B58' })\r\n    );\r\n    myFullDiagram.linkTemplate = myLinkTemplate;\r\n    myLocalDiagram.linkTemplate = myLinkTemplate;\r\n\r\n    highlighter = $(\r\n        go.Part,\r\n        'Auto',\r\n        {\r\n            layerName: 'Background',\r\n            selectable: false,\r\n            isInDocumentBounds: false,\r\n            locationSpot: go.Spot.Center,\r\n        },\r\n        $(go.Shape, 'Ellipse', {\r\n            fill: $(go.Brush, 'Radial', {\r\n                0.0: 'yellow',\r\n                1.0: 'white',\r\n            }),\r\n            stroke: null,\r\n            desiredSize: new go.Size(400, 400),\r\n        })\r\n    );\r\n    myFullDiagram.add(highlighter);\r\n    deleteNodes();\r\n    myFullDiagram.model = new go.TreeModel(nodesArr);\r\n\r\n    myFullDiagram.addDiagramListener('InitialLayoutCompleted', e => {\r\n        var node0 = myFullDiagram.findPartForKey(0);\r\n        if (node0 !== null) node0.isSelected = true;\r\n        showLocalOnFullClick();\r\n    });\r\n\r\n    var searchValue = '';\r\n    var foundNodes = null;\r\n    function resetSearchDiagram() {\r\n        searchValue = '';\r\n        foundNodes = null;\r\n    }\r\n\r\n    function findNodesByText(text) {\r\n        var safe = text.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n        var regex = new RegExp(safe, 'i');\r\n        var nodes = myDiagram.findNodesByExample({ text: regex });\r\n        return nodes;\r\n    }\r\n\r\n    function searchDiagramByNodeText(e) {\r\n        if (e.keyCode !== 13) {\r\n            return;\r\n        }\r\n\r\n        if (!e.target.value) {\r\n            resetSearchDiagram();\r\n            return;\r\n        }\r\n\r\n        if (e.target.value !== searchValue) {\r\n            resetSearchDiagram();\r\n            searchValue = e.target.value;\r\n            foundNodes = findNodesByText(searchValue);\r\n        }\r\n\r\n        if (foundNodes.next() === false) {\r\n            resetSearchDiagram();\r\n            return;\r\n        }\r\n\r\n        var node = foundNodes.value;\r\n        expandNode(node);\r\n        selectNode(node);\r\n    }\r\n    globalSearch = function (value) {\r\n        if (!value) {\r\n            resetSearchDiagram();\r\n            return;\r\n        }\r\n\r\n        if (value !== searchValue) {\r\n            resetSearchDiagram();\r\n            searchValue = value;\r\n            foundNodes = findNodesByText(searchValue);\r\n        }\r\n\r\n        if (foundNodes.next() === false) {\r\n            resetSearchDiagram();\r\n            return;\r\n        }\r\n\r\n        var node = foundNodes.value;\r\n        expandNode(node);\r\n        selectNode(node);\r\n    };\r\n    function selectNode(node) {\r\n        node.isSelected = true;\r\n        myDiagram.select(node);\r\n        myDiagram.scrollToRect(node.actualBounds);\r\n    }\r\n\r\n    document\r\n        .getElementById('treeSearchInput')\r\n        .addEventListener('keyup', searchDiagramByNodeText);\r\n    function initSelectedNode() {\r\n        const selectedNodeText = sessionStorage.getItem(\r\n            'selectedChartLeafNodeName'\r\n        );\r\n        sessionStorage.removeItem('selectedChartLeafNodeName');\r\n        if (!selectedNodeText) {\r\n            return;\r\n        }\r\n        setTimeout(() => {\r\n            const nodes = findNodesByText(selectedNodeText);\r\n            if (nodes.hasNext() === false) {\r\n                return;\r\n            }\r\n            const node = nodes.first();\r\n            expandNode(node);\r\n            selectNode(node);\r\n        }, 0);\r\n    }\r\n    initSelectedNode();\r\n    if (window.searchParam) {\r\n        setTimeout(() => globalSearch(window.searchParam), 1000);\r\n    }\r\n} \r\n\r\nfunction imageConverter(prop, picture) {\r\n    var node = picture.part;\r\n    \r\n    if (node.isTreeLeaf) {\r\n        switch(node.jb.color){\r\n            case \"rgba(176, 173, 171, 1)\":\r\n                return window.images.documentSvgBusinessUnits;\r\n            case \"rgba(0, 176, 80, 1)\":\r\n                return window.images.documentSvgSubsidiaries;\r\n            case \"rgba(87, 51, 145,1)\": \r\n                return window.images.documentSvgJointVentures;\r\n            case \"rgba(228, 88, 38, 1)\": \r\n                return window.images.documentSvgAssociates;\r\n            case \"rgba(61, 148, 179, 1)\":\r\n                return window.images.documentSvgTypes;\r\n            case \"rgba(4, 111, 80, 1)\":\r\n                return window.images.documentSvgPSARSA;\r\n            case \"rgba(102, 153, 255, 1)\":\r\n                return window.images.documentSvgFinancialIntruments;\r\n            case \"rgba(6, 45, 146, 1)\":\r\n                return window.images.documentSvgSubSusidiaries;\r\n            case \"rgba(0, 176, 240, 1)\":\r\n                return window.images.documentSvgSocar;\r\n            case \"rgba(184, 144, 22, 1)\":\r\n                return window.images.documentSvgOperatingCompany;\r\n            default:\r\n                return window.images.documentSvgDefault;\r\n        }\r\n    } else {\r\n        if (node.isTreeExpanded) {\r\n            return window.images.openFolder;\r\n        } else {\r\n            return window.images.closedFolder;\r\n        }\r\n    }\r\n}\r\n\r\nfunction showLocalOnLocalClick() {\r\n    setTimeout(()=>{\r\n        var selectedLocal = myLocalDiagram.selection.first();\r\n        if (selectedLocal !== null) {\r\n            myFullDiagram.select(\r\n                myFullDiagram.findPartForKey(selectedLocal.data.key)\r\n            );\r\n            selectTreeNodeByKey(selectedLocal.data.key);\r\n        }\r\n        myLocalDiagram.commitTransaction(\"changed data\");\r\n    }, 500);\r\n}\r\n\r\nfunction showLocalOnFullClick() {\r\n    var node = myFullDiagram.selection.first();\r\n    if (node !== null) {\r\n        myFullDiagram.scrollToRect(node.actualBounds);\r\n        highlighter.location = node.location;\r\n        var model = new go.TreeModel();\r\n        var nearby = node.findTreeParts(3); \r\n        var parent = node.findTreeParentNode();\r\n        if (parent !== null) {\r\n            nearby.add(parent);\r\n            var grandparent = parent.findTreeParentNode();\r\n            if (grandparent !== null) {\r\n                nearby.add(grandparent);\r\n            }\r\n        }\r\n        nearby.each(n => {\r\n            if (n instanceof go.Node) model.addNodeData(n.data);\r\n        });\r\n        myLocalDiagram.model = model;\r\n        //myLocalDiagram.model = remoteMiddleBlockFromFigure(model);\r\n        var selectedLocal = myLocalDiagram.findPartForKey(node.data.key);\r\n        if (selectedLocal !== null) selectedLocal.isSelected = true;\r\n        selectTreeNodeByKey(node.data.key);\r\n    }\r\n}\r\nvar removedParentObject = null;\r\nfunction  remoteMiddleBlockFromFigure(model){\r\n    /**\r\n     * \"SOCAR TURKEY ENERJI A.Ş. (STEAŞ)\",\r\n    \"SOCAR Energy Georgia LLC\", \"SOCAR Trading Holding Limited (Malta)\", \r\n    \"SOCAR Energy Holdings AG\", \"SOCAR Overseas\", \"SOCAR Energy Ukraine LLC\", \r\n    \"SOCAR Rus LLC\", \"Caspian Drilling Company (CDC)\", \"Cooperative Menkent U.A.\", \r\n    \"Azerbaijan(AzAGG) Ltd.\", \"Azarbaijan (Sah Daniz) Ltd.\", \"Azerbaijan BTC Ltd (AzBTC)\",\r\n    \"Azerbaijan SCP Limited (AzSCP)\", \"Southern Gas Corridor CJSC\", \"Relex Holdings Lrd (Cyprus)\",\r\n    \"Revaz Sharangiya (Georgia)\", \"SOCAR GPC Limited (Guernsey)\", \"Cooperative Menkent U.A. (Netherlands)\",\r\n    \"SOCAR Balkans S.a.r.l (Luxembourg)\", \"Sermaye Investments Limited\",\r\n    \"Gacrux Middle East Inversments Holding Ltd (UAE)\"\r\n     */\r\n    removedParentObject = null;\r\n    const nameArr = [\"Business Units\", \"Subsidiaries\", \"Joint Ventures\",\r\n    \"Associates\", \"PSAs and RSAs in Development and Production Phase\", \r\n    \"PSAs and RSAs in Exploration and Evalution Phase\"];\r\n    if(model.Fc.length <= 10){\r\n        var ind = model.Fc.findIndex(x=>nameArr.includes(x.text));\r\n        removedParentObject = model.Fc[ind];\r\n        if(ind !== -1){\r\n            model.Fc.splice(ind, 1);\r\n        }\r\n        model.Fc = model.Fc.map(x => {\r\n            x.key = Number.parseInt(x.key);\r\n            return x;\r\n        })\r\n        model.Fc = _.orderBy(model.Fc, 'key');\r\n        model.Fc = model.Fc.map(x => {\r\n            x.key = x.key.toString();\r\n            return x;\r\n        });\r\n        model.Fc[1].parent = model.Fc[0].key;\r\n    }\r\n    return model;\r\n}\r\n\r\nfunction treeSelectionChanged() {\r\n    var node = myDiagram.selection.first();\r\n    if (node === null) {\r\n        return;\r\n    }\r\n    var selectedLocal = myFullDiagram.findPartForKey(node.data.key);\r\n    if (selectedLocal !== null) selectedLocal.isSelected = true;\r\n    myFullDiagram.select(myFullDiagram.findPartForKey(selectedLocal.data.key));\r\n\r\n    node = myFullDiagram.selection.first();\r\n    if (node === null) {\r\n        return;\r\n    }\r\n    myFullDiagram.scrollToRect(node.actualBounds);\r\n    highlighter.location = node.location;\r\n}\r\n\r\nfunction selectTreeNodeByKey(key) {\r\n    var selectedLocal = myDiagram.findPartForKey(key);\r\n    if (selectedLocal !== null) selectedLocal.isSelected = true;\r\n    myDiagram.select(myDiagram.findPartForKey(key));\r\n\r\n    node = myDiagram.selection.first();\r\n    if (node === null) {\r\n        return;\r\n    }\r\n    expandNode(node);\r\n\r\n    selectedLocal = myDiagram.findPartForKey(key);\r\n    if (selectedLocal !== null) selectedLocal.isSelected = true;\r\n    myDiagram.select(myDiagram.findPartForKey(key));\r\n\r\n    node = myDiagram.selection.first();\r\n    if (node === null) {\r\n        return;\r\n    }\r\n    myDiagram.scrollToRect(node.actualBounds);\r\n}\r\n\r\nfunction expandNode(node) {\r\n    if (!node) {\r\n        return;\r\n    }\r\n    var diagram = node.diagram;\r\n    diagram.startTransaction('CollapseExpandTree');\r\n    var data = node.data;\r\n    if (node.isTreeExpanded === false) {\r\n        diagram.commandHandler.expandTree(node);\r\n    }\r\n    diagram.commitTransaction('CollapseExpandTree');\r\n    expandNode(node.findTreeParentNode());\r\n}\r\nwindow.addEventListener('DOMContentLoaded', async () => {\r\n    await init();\r\n    // setTimeout(() => deleteNodes(), 1000);\r\n});\r\n\r\n\r\nfunction deleteNodes(){\r\n    nodesArr = nodesArr.map(x=>{\r\n        if(x.parent === \"1\" || x.parent === \"29\" || x.parent === \"88\" \r\n        || x.parent === \"114\" || x.parent === \"138\" || x.parent === \"162\"){\r\n            x.parent = \"0\";\r\n        } \r\n        return x;\r\n    });\r\n    var buUnits = nodesArr.findIndex(x=>x.key === \"1\");\r\n    nodesArr.splice(buUnits, 1);\r\n    var subsidiaries = nodesArr.findIndex(x=>x.key === \"29\");\r\n    nodesArr.splice(subsidiaries, 1);\r\n    var jointVentures = nodesArr.findIndex(x=>x.key ===\"88\");\r\n    nodesArr.splice(jointVentures, 1);\r\n    var associates = nodesArr.findIndex(x=>x.key === \"114\");\r\n    nodesArr.splice(associates, 1);\r\n    var psa1 = nodesArr.findIndex(x=>x.key === \"138\");\r\n    nodesArr.splice(psa1, 1);\r\n    var psa2 = nodesArr.findIndex(x=>x.key === \"162\");\r\n    nodesArr.splice(psa2, 1);\r\n}\n\n//# sourceURL=webpack://socar_strcuture_tree/./joint-companies.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./joint-companies.js"]();
/******/ 	
/******/ })()
;